From 4b9105ea9325e3e447a3350c271afa04a08f25cc Mon Sep 17 00:00:00 2001
From: Haris Okanovic <haris.okanovic@ni.com>
Date: Mon, 21 Jul 2014 09:23:45 -0500
Subject: [PATCH] Decorate API functions on Windows with __cdecl

Adds __cdecl decoration to API functions on Win32 systems so that cURL
may be used in applications compiled with /Gz (__stdcall).

Upstream-Status: Pending [Needs clean-up]
---
 include/curl/curl.h  | 106 ++++++++++++++++++++++++++-------------------------
 include/curl/easy.h  |  18 ++++-----
 include/curl/multi.h |  34 ++++++++---------
 3 files changed, 81 insertions(+), 77 deletions(-)

diff --git a/include/curl/curl.h b/include/curl/curl.h
index 44b1b7e39115f59d9e67decf9ccb3956058c1327..8aaa6f578f960876a57e62d42d28c054b04c7799 100644
--- a/include/curl/curl.h
+++ b/include/curl/curl.h
@@ -96,6 +96,12 @@ typedef void CURL;
  * libcurl external API function linkage decorations.
  */
 
+#if defined(WIN32) || defined(_WIN32)
+#  define CURL_FUNCC __cdecl
+#else
+#  define CURL_FUNCC
+#endif /* defined(WIN32) || defined(_WIN32) */
+
 #ifdef CURL_STATICLIB
 #  define CURL_EXTERN
 #elif defined(WIN32) || defined(_WIN32) || defined(__SYMBIAN32__)
@@ -158,7 +164,7 @@ struct curl_httppost {
 
 /* This is the CURLOPT_PROGRESSFUNCTION callback proto. It is now considered
    deprecated but was the only choice up until 7.31.0 */
-typedef int (*curl_progress_callback)(void *clientp,
+typedef int (CURL_FUNCC * curl_progress_callback)(void *clientp,
                                       double dltotal,
                                       double dlnow,
                                       double ultotal,
@@ -166,7 +172,7 @@ typedef int (*curl_progress_callback)(void *clientp,
 
 /* This is the CURLOPT_XFERINFOFUNCTION callback proto. It was introduced in
    7.32.0, it avoids floating point and provides more detailed information. */
-typedef int (*curl_xferinfo_callback)(void *clientp,
+typedef int (CURL_FUNCC *curl_xferinfo_callback)(void *clientp,
                                       curl_off_t dltotal,
                                       curl_off_t dlnow,
                                       curl_off_t ultotal,
@@ -192,8 +198,7 @@ typedef int (*curl_xferinfo_callback)(void *clientp,
 /* This is a magic return code for the write callback that, when returned,
    will signal libcurl to pause receiving on the current transfer. */
 #define CURL_WRITEFUNC_PAUSE 0x10000001
-
-typedef size_t (*curl_write_callback)(char *buffer,
+typedef size_t (CURL_FUNCC * curl_write_callback)(char *buffer,
                                       size_t size,
                                       size_t nitems,
                                       void *outstream);
@@ -262,7 +267,7 @@ struct curl_fileinfo {
 /* if splitting of data transfer is enabled, this callback is called before
    download of an individual chunk started. Note that parameter "remains" works
    only for FTP wildcard downloading (for now), otherwise is not used */
-typedef long (*curl_chunk_bgn_callback)(const void *transfer_info,
+typedef long (CURL_FUNCC *curl_chunk_bgn_callback)(const void *transfer_info,
                                         void *ptr,
                                         int remains);
 
@@ -276,7 +281,7 @@ typedef long (*curl_chunk_bgn_callback)(const void *transfer_info,
    Even if downloading of this chunk was skipped in CHUNK_BGN_FUNC.
    This is the reason why we don't need "transfer_info" parameter in this
    callback and we are not interested in "remains" parameter too. */
-typedef long (*curl_chunk_end_callback)(void *ptr);
+typedef long (CURL_FUNCC *curl_chunk_end_callback)(void *ptr);
 
 /* return codes for FNMATCHFUNCTION */
 #define CURL_FNMATCHFUNC_MATCH    0 /* string corresponds to the pattern */
@@ -285,7 +290,7 @@ typedef long (*curl_chunk_end_callback)(void *ptr);
 
 /* callback type for wildcard downloading pattern matching. If the
    string matches the pattern, return CURL_FNMATCHFUNC_MATCH value, etc. */
-typedef int (*curl_fnmatch_callback)(void *ptr,
+typedef int (CURL_FUNCC *curl_fnmatch_callback)(void *ptr,
                                      const char *pattern,
                                      const char *string);
 
@@ -294,7 +299,7 @@ typedef int (*curl_fnmatch_callback)(void *ptr,
 #define CURL_SEEKFUNC_FAIL     1 /* fail the entire transfer */
 #define CURL_SEEKFUNC_CANTSEEK 2 /* tell libcurl seeking can't be done, so
                                     libcurl might try other means instead */
-typedef int (*curl_seek_callback)(void *instream,
+typedef int (CURL_FUNCC *curl_seek_callback)(void *instream,
                                   curl_off_t offset,
                                   int origin); /* 'whence' */
 
@@ -305,7 +310,7 @@ typedef int (*curl_seek_callback)(void *instream,
    signal libcurl to pause sending data on the current transfer. */
 #define CURL_READFUNC_PAUSE 0x10000001
 
-typedef size_t (*curl_read_callback)(char *buffer,
+typedef size_t (CURL_FUNCC * curl_read_callback)(char *buffer,
                                       size_t size,
                                       size_t nitems,
                                       void *instream);
@@ -323,7 +328,7 @@ typedef enum  {
                                 CURLE_ABORTED_BY_CALLBACK */
 #define CURL_SOCKOPT_ALREADY_CONNECTED 2
 
-typedef int (*curl_sockopt_callback)(void *clientp,
+typedef int (CURL_FUNCC *curl_sockopt_callback)(void *clientp,
                                      curl_socket_t curlfd,
                                      curlsocktype purpose);
 
@@ -338,12 +343,12 @@ struct curl_sockaddr {
 };
 
 typedef curl_socket_t
-(*curl_opensocket_callback)(void *clientp,
+(CURL_FUNCC * curl_opensocket_callback)(void *clientp,
                             curlsocktype purpose,
                             struct curl_sockaddr *address);
 
 typedef int
-(*curl_closesocket_callback)(void *clientp, curl_socket_t item);
+(CURL_FUNCC *curl_closesocket_callback)(void *clientp, curl_socket_t item);
 
 typedef enum {
   CURLIOE_OK,            /* I/O operation successful */
@@ -358,7 +363,7 @@ typedef enum  {
   CURLIOCMD_LAST         /* never use */
 } curliocmd;
 
-typedef curlioerr (*curl_ioctl_callback)(CURL *handle,
+typedef curlioerr (CURL_FUNCC * curl_ioctl_callback)(CURL *handle,
                                          int cmd,
                                          void *clientp);
 
@@ -368,11 +373,11 @@ typedef curlioerr (*curl_ioctl_callback)(CURL *handle,
  * curl_global_init_mem() function to set user defined memory management
  * callback routines.
  */
-typedef void *(*curl_malloc_callback)(size_t size);
-typedef void (*curl_free_callback)(void *ptr);
-typedef void *(*curl_realloc_callback)(void *ptr, size_t size);
-typedef char *(*curl_strdup_callback)(const char *str);
-typedef void *(*curl_calloc_callback)(size_t nmemb, size_t size);
+typedef void *(CURL_FUNCC * curl_malloc_callback)(size_t size);
+typedef void (CURL_FUNCC * curl_free_callback)(void *ptr);
+typedef void *(CURL_FUNCC * curl_realloc_callback)(void *ptr, size_t size);
+typedef char *(CURL_FUNCC * curl_strdup_callback)(const char *str);
+typedef void *(CURL_FUNCC * curl_calloc_callback)(size_t nmemb, size_t size);
 
 /* the kind of data that is passed to information_callback*/
 typedef enum {
@@ -386,7 +391,7 @@ typedef enum {
   CURLINFO_END
 } curl_infotype;
 
-typedef int (*curl_debug_callback)
+typedef int (CURL_FUNCC * curl_debug_callback)
        (CURL *handle,      /* the handle/transfer this concerns */
         curl_infotype type, /* what kind of data */
         char *data,        /* points to the data */
@@ -599,9 +604,9 @@ typedef enum {
 #endif /*!CURL_NO_OLDIES*/
 
 /* This prototype applies to all conversion callbacks */
-typedef CURLcode (*curl_conv_callback)(char *buffer, size_t length);
+typedef CURLcode (CURL_FUNCC * curl_conv_callback)(char *buffer, size_t length);
 
-typedef CURLcode (*curl_ssl_ctx_callback)(CURL *curl,    /* easy handle */
+typedef CURLcode (CURL_FUNCC * curl_ssl_ctx_callback)(CURL *curl,    /* easy handle */
                                           void *ssl_ctx, /* actually an
                                                             OpenSSL SSL_CTX */
                                           void *userptr);
@@ -700,7 +705,7 @@ enum curl_khmatch {
 };
 
 typedef int
-  (*curl_sshkeycallback) (CURL *easy,     /* easy handle */
+  (CURL_FUNCC *curl_sshkeycallback) (CURL *easy,     /* easy handle */
                           const struct curl_khkey *knownkey, /* known */
                           const struct curl_khkey *foundkey, /* found */
                           enum curl_khmatch, /* libcurl's view on the keys */
@@ -1750,8 +1755,8 @@ typedef enum {
 
 /* curl_strequal() and curl_strnequal() are subject for removal in a future
    libcurl, see lib/README.curlx for details */
-CURL_EXTERN int (curl_strequal)(const char *s1, const char *s2);
-CURL_EXTERN int (curl_strnequal)(const char *s1, const char *s2, size_t n);
+CURL_EXTERN int (CURL_FUNCC curl_strequal)(const char *s1, const char *s2);
+CURL_EXTERN int (CURL_FUNCC curl_strnequal)(const char *s1, const char *s2, size_t n);
 
 /* name is uppercase CURLFORM_<name> */
 #ifdef CFINIT
@@ -1842,7 +1847,7 @@ typedef enum {
  * adds one part that together construct a full post. Then use
  * CURLOPT_HTTPPOST to send it off to libcurl.
  */
-CURL_EXTERN CURLFORMcode curl_formadd(struct curl_httppost **httppost,
+CURL_EXTERN CURLFORMcode CURL_FUNCC curl_formadd(struct curl_httppost **httppost,
                                       struct curl_httppost **last_post,
                                       ...);
 
@@ -1854,8 +1859,7 @@ CURL_EXTERN CURLFORMcode curl_formadd(struct curl_httppost **httppost,
  * Should return the buffer length passed to it as the argument "len" on
  *   success.
  */
-typedef size_t (*curl_formget_callback)(void *arg, const char *buf,
-                                        size_t len);
+typedef size_t (CURL_FUNCC * curl_formget_callback)(void *arg, const char *buf, size_t len);
 
 /*
  * NAME curl_formget()
@@ -1867,7 +1871,7 @@ typedef size_t (*curl_formget_callback)(void *arg, const char *buf,
  * the curl_formget_callback function.
  * Returns 0 on success.
  */
-CURL_EXTERN int curl_formget(struct curl_httppost *form, void *arg,
+CURL_EXTERN int CURL_FUNCC curl_formget(struct curl_httppost *form, void *arg,
                              curl_formget_callback append);
 /*
  * NAME curl_formfree()
@@ -1876,7 +1880,7 @@ CURL_EXTERN int curl_formget(struct curl_httppost *form, void *arg,
  *
  * Free a multipart formpost previously built with curl_formadd().
  */
-CURL_EXTERN void curl_formfree(struct curl_httppost *form);
+CURL_EXTERN void CURL_FUNCC curl_formfree(struct curl_httppost *form);
 
 /*
  * NAME curl_getenv()
@@ -1886,7 +1890,7 @@ CURL_EXTERN void curl_formfree(struct curl_httppost *form);
  * Returns a malloc()'ed string that MUST be curl_free()ed after usage is
  * complete. DEPRECATED - see lib/README.curlx
  */
-CURL_EXTERN char *curl_getenv(const char *variable);
+CURL_EXTERN char * CURL_FUNCC curl_getenv(const char *variable);
 
 /*
  * NAME curl_version()
@@ -1895,7 +1899,7 @@ CURL_EXTERN char *curl_getenv(const char *variable);
  *
  * Returns a static ascii string of the libcurl version.
  */
-CURL_EXTERN char *curl_version(void);
+CURL_EXTERN char * CURL_FUNCC curl_version(void);
 
 /*
  * NAME curl_easy_escape()
@@ -1906,12 +1910,12 @@ CURL_EXTERN char *curl_version(void);
  * %XX versions). This function returns a new allocated string or NULL if an
  * error occurred.
  */
-CURL_EXTERN char *curl_easy_escape(CURL *handle,
+CURL_EXTERN char * CURL_FUNCC curl_easy_escape(CURL *handle,
                                    const char *string,
                                    int length);
 
 /* the previous version: */
-CURL_EXTERN char *curl_escape(const char *string,
+CURL_EXTERN char * CURL_FUNCC curl_escape(const char *string,
                               int length);
 
 
@@ -1926,13 +1930,13 @@ CURL_EXTERN char *curl_escape(const char *string,
  * Conversion Note: On non-ASCII platforms the ASCII %XX codes are
  * converted into the host encoding.
  */
-CURL_EXTERN char *curl_easy_unescape(CURL *handle,
+CURL_EXTERN char *CURL_FUNCC curl_easy_unescape(CURL *handle,
                                      const char *string,
                                      int length,
                                      int *outlength);
 
 /* the previous version */
-CURL_EXTERN char *curl_unescape(const char *string,
+CURL_EXTERN char * CURL_FUNCC curl_unescape(const char *string,
                                 int length);
 
 /*
@@ -1943,7 +1947,7 @@ CURL_EXTERN char *curl_unescape(const char *string,
  * Provided for de-allocation in the same translation unit that did the
  * allocation. Added in libcurl 7.10
  */
-CURL_EXTERN void curl_free(void *p);
+CURL_EXTERN void CURL_FUNCC curl_free(void *p);
 
 /*
  * NAME curl_global_init()
@@ -1955,7 +1959,7 @@ CURL_EXTERN void curl_free(void *p);
  *
  * This function is not thread-safe!
  */
-CURL_EXTERN CURLcode curl_global_init(long flags);
+CURL_EXTERN CURLcode CURL_FUNCC curl_global_init(long flags);
 
 /*
  * NAME curl_global_init_mem()
@@ -1970,7 +1974,7 @@ CURL_EXTERN CURLcode curl_global_init(long flags);
  * callback routines with be invoked by this library instead of the system
  * memory management routines like malloc, free etc.
  */
-CURL_EXTERN CURLcode curl_global_init_mem(long flags,
+CURL_EXTERN CURLcode CURL_FUNCC curl_global_init_mem(long flags,
                                           curl_malloc_callback m,
                                           curl_free_callback f,
                                           curl_realloc_callback r,
@@ -1985,7 +1989,7 @@ CURL_EXTERN CURLcode curl_global_init_mem(long flags,
  * curl_global_cleanup() should be invoked exactly once for each application
  * that uses libcurl
  */
-CURL_EXTERN void curl_global_cleanup(void);
+CURL_EXTERN void CURL_FUNCC curl_global_cleanup(void);
 
 /* linked-list structure for the CURLOPT_QUOTE option (and other) */
 struct curl_slist {
@@ -2001,7 +2005,7 @@ struct curl_slist {
  * Appends a string to a linked list. If no list exists, it will be created
  * first. Returns the new list, after appending.
  */
-CURL_EXTERN struct curl_slist *curl_slist_append(struct curl_slist *,
+CURL_EXTERN struct curl_slist * CURL_FUNCC curl_slist_append(struct curl_slist *,
                                                  const char *);
 
 /*
@@ -2011,7 +2015,7 @@ CURL_EXTERN struct curl_slist *curl_slist_append(struct curl_slist *,
  *
  * free a previously built curl_slist.
  */
-CURL_EXTERN void curl_slist_free_all(struct curl_slist *);
+CURL_EXTERN void CURL_FUNCC curl_slist_free_all(struct curl_slist *);
 
 /*
  * NAME curl_getdate()
@@ -2022,7 +2026,7 @@ CURL_EXTERN void curl_slist_free_all(struct curl_slist *);
  * the first argument. The time argument in the second parameter is unused
  * and should be set to NULL.
  */
-CURL_EXTERN time_t curl_getdate(const char *p, const time_t *unused);
+CURL_EXTERN time_t CURL_FUNCC curl_getdate(const char *p, const time_t *unused);
 
 /* info about the certificate chain, only for OpenSSL builds. Asked
    for with CURLOPT_CERTINFO / CURLINFO_CERTINFO */
@@ -2164,11 +2168,11 @@ typedef enum {
   CURL_LOCK_ACCESS_LAST        /* never use */
 } curl_lock_access;
 
-typedef void (*curl_lock_function)(CURL *handle,
+typedef void (CURL_FUNCC * curl_lock_function)(CURL *handle,
                                    curl_lock_data data,
                                    curl_lock_access locktype,
                                    void *userptr);
-typedef void (*curl_unlock_function)(CURL *handle,
+typedef void (CURL_FUNCC * curl_unlock_function)(CURL *handle,
                                      curl_lock_data data,
                                      void *userptr);
 
@@ -2195,9 +2199,9 @@ typedef enum {
   CURLSHOPT_LAST  /* never use */
 } CURLSHoption;
 
-CURL_EXTERN CURLSH *curl_share_init(void);
-CURL_EXTERN CURLSHcode curl_share_setopt(CURLSH *, CURLSHoption option, ...);
-CURL_EXTERN CURLSHcode curl_share_cleanup(CURLSH *);
+CURL_EXTERN CURLSH * CURL_FUNCC curl_share_init(void);
+CURL_EXTERN CURLSHcode CURL_FUNCC curl_share_setopt(CURLSH *, CURLSHoption option, ...);
+CURL_EXTERN CURLSHcode CURL_FUNCC curl_share_cleanup(CURLSH *);
 
 /****************************************************************************
  * Structures for querying information about the curl library at runtime.
@@ -2279,7 +2283,7 @@ typedef struct {
  * This function returns a pointer to a static copy of the version info
  * struct. See above.
  */
-CURL_EXTERN curl_version_info_data *curl_version_info(CURLversion);
+CURL_EXTERN curl_version_info_data * CURL_FUNCC curl_version_info(CURLversion);
 
 /*
  * NAME curl_easy_strerror()
@@ -2290,7 +2294,7 @@ CURL_EXTERN curl_version_info_data *curl_version_info(CURLversion);
  * into the equivalent human readable error string.  This is useful
  * for printing meaningful error messages.
  */
-CURL_EXTERN const char *curl_easy_strerror(CURLcode);
+CURL_EXTERN const char * CURL_FUNCC curl_easy_strerror(CURLcode);
 
 /*
  * NAME curl_share_strerror()
@@ -2301,7 +2305,7 @@ CURL_EXTERN const char *curl_easy_strerror(CURLcode);
  * into the equivalent human readable error string.  This is useful
  * for printing meaningful error messages.
  */
-CURL_EXTERN const char *curl_share_strerror(CURLSHcode);
+CURL_EXTERN const char * CURL_FUNCC curl_share_strerror(CURLSHcode);
 
 /*
  * NAME curl_easy_pause()
@@ -2312,7 +2316,7 @@ CURL_EXTERN const char *curl_share_strerror(CURLSHcode);
  * state by setting the bitmask, use the convenience defines below.
  *
  */
-CURL_EXTERN CURLcode curl_easy_pause(CURL *handle, int bitmask);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_pause(CURL *handle, int bitmask);
 
 #define CURLPAUSE_RECV      (1<<0)
 #define CURLPAUSE_RECV_CONT (0)
diff --git a/include/curl/easy.h b/include/curl/easy.h
index c1e3e76096e3925821da279a2f2eae67ae61e0e8..75f0834236e290015e14aa4423afbeffec735b7f 100644
--- a/include/curl/easy.h
+++ b/include/curl/easy.h
@@ -25,10 +25,10 @@
 extern "C" {
 #endif
 
-CURL_EXTERN CURL *curl_easy_init(void);
-CURL_EXTERN CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...);
-CURL_EXTERN CURLcode curl_easy_perform(CURL *curl);
-CURL_EXTERN void curl_easy_cleanup(CURL *curl);
+CURL_EXTERN CURL * CURL_FUNCC curl_easy_init(void);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_setopt(CURL *curl, CURLoption option, ...);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_perform(CURL *curl);
+CURL_EXTERN void CURL_FUNCC curl_easy_cleanup(CURL *curl);
 
 /*
  * NAME curl_easy_getinfo()
@@ -43,7 +43,7 @@ CURL_EXTERN void curl_easy_cleanup(CURL *curl);
  * performed transfer, all results from this function are undefined until the
  * transfer is completed.
  */
-CURL_EXTERN CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
 
 
 /*
@@ -58,7 +58,7 @@ CURL_EXTERN CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
  * curl_easy_duphandle() for each new thread to avoid a series of identical
  * curl_easy_setopt() invokes in every thread.
  */
-CURL_EXTERN CURL* curl_easy_duphandle(CURL *curl);
+CURL_EXTERN CURL* CURL_FUNCC curl_easy_duphandle(CURL *curl);
 
 /*
  * NAME curl_easy_reset()
@@ -71,7 +71,7 @@ CURL_EXTERN CURL* curl_easy_duphandle(CURL *curl);
  * It does keep: live connections, the Session ID cache, the DNS cache and the
  * cookies.
  */
-CURL_EXTERN void curl_easy_reset(CURL *curl);
+CURL_EXTERN void CURL_FUNCC curl_easy_reset(CURL *curl);
 
 /*
  * NAME curl_easy_recv()
@@ -81,7 +81,7 @@ CURL_EXTERN void curl_easy_reset(CURL *curl);
  * Receives data from the connected socket. Use after successful
  * curl_easy_perform() with CURLOPT_CONNECT_ONLY option.
  */
-CURL_EXTERN CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen,
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_recv(CURL *curl, void *buffer, size_t buflen,
                                     size_t *n);
 
 /*
@@ -92,7 +92,7 @@ CURL_EXTERN CURLcode curl_easy_recv(CURL *curl, void *buffer, size_t buflen,
  * Sends data over the connected socket. Use after successful
  * curl_easy_perform() with CURLOPT_CONNECT_ONLY option.
  */
-CURL_EXTERN CURLcode curl_easy_send(CURL *curl, const void *buffer,
+CURL_EXTERN CURLcode CURL_FUNCC curl_easy_send(CURL *curl, const void *buffer,
                                     size_t buflen, size_t *n);
 
 #ifdef  __cplusplus
diff --git a/include/curl/multi.h b/include/curl/multi.h
index 3c4acb0f6eafdedaa81bcd24af8f0b5353b5f304..45b9ab921266402d0c5d67d2c6641e5de544b4a1 100644
--- a/include/curl/multi.h
+++ b/include/curl/multi.h
@@ -111,7 +111,7 @@ struct curl_waitfd {
  *
  * Returns: a new CURLM handle to use in all 'curl_multi' functions.
  */
-CURL_EXTERN CURLM *curl_multi_init(void);
+CURL_EXTERN CURLM *CURL_FUNCC curl_multi_init(void);
 
 /*
  * Name:    curl_multi_add_handle()
@@ -120,7 +120,7 @@ CURL_EXTERN CURLM *curl_multi_init(void);
  *
  * Returns: CURLMcode type, general multi error code.
  */
-CURL_EXTERN CURLMcode curl_multi_add_handle(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_add_handle(CURLM *multi_handle,
                                             CURL *curl_handle);
 
  /*
@@ -130,7 +130,7 @@ CURL_EXTERN CURLMcode curl_multi_add_handle(CURLM *multi_handle,
   *
   * Returns: CURLMcode type, general multi error code.
   */
-CURL_EXTERN CURLMcode curl_multi_remove_handle(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_remove_handle(CURLM *multi_handle,
                                                CURL *curl_handle);
 
  /*
@@ -142,7 +142,7 @@ CURL_EXTERN CURLMcode curl_multi_remove_handle(CURLM *multi_handle,
   *
   * Returns: CURLMcode type, general multi error code.
   */
-CURL_EXTERN CURLMcode curl_multi_fdset(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_fdset(CURLM *multi_handle,
                                        fd_set *read_fd_set,
                                        fd_set *write_fd_set,
                                        fd_set *exc_fd_set,
@@ -156,7 +156,7 @@ CURL_EXTERN CURLMcode curl_multi_fdset(CURLM *multi_handle,
  *
  * Returns:  CURLMcode type, general multi error code.
  */
-CURL_EXTERN CURLMcode curl_multi_wait(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_wait(CURLM *multi_handle,
                                       struct curl_waitfd extra_fds[],
                                       unsigned int extra_nfds,
                                       int timeout_ms,
@@ -178,7 +178,7 @@ CURL_EXTERN CURLMcode curl_multi_wait(CURLM *multi_handle,
   *          still have occurred problems on invidual transfers even when this
   *          returns OK.
   */
-CURL_EXTERN CURLMcode curl_multi_perform(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_perform(CURLM *multi_handle,
                                          int *running_handles);
 
  /*
@@ -191,7 +191,7 @@ CURL_EXTERN CURLMcode curl_multi_perform(CURLM *multi_handle,
   *
   * Returns: CURLMcode type, general multi error code.
   */
-CURL_EXTERN CURLMcode curl_multi_cleanup(CURLM *multi_handle);
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_cleanup(CURLM *multi_handle);
 
 /*
  * Name:    curl_multi_info_read()
@@ -221,7 +221,7 @@ CURL_EXTERN CURLMcode curl_multi_cleanup(CURLM *multi_handle);
  *          queue (after this read) in the integer the second argument points
  *          to.
  */
-CURL_EXTERN CURLMsg *curl_multi_info_read(CURLM *multi_handle,
+CURL_EXTERN CURLMsg *CURL_FUNCC curl_multi_info_read(CURLM *multi_handle,
                                           int *msgs_in_queue);
 
 /*
@@ -233,7 +233,7 @@ CURL_EXTERN CURLMsg *curl_multi_info_read(CURLM *multi_handle,
  *
  * Returns: A pointer to a zero-terminated error message.
  */
-CURL_EXTERN const char *curl_multi_strerror(CURLMcode);
+CURL_EXTERN const char *CURL_FUNCC curl_multi_strerror(CURLMcode);
 
 /*
  * Name:    curl_multi_socket() and
@@ -256,7 +256,7 @@ CURL_EXTERN const char *curl_multi_strerror(CURLMcode);
 #define CURL_CSELECT_OUT  0x02
 #define CURL_CSELECT_ERR  0x04
 
-typedef int (*curl_socket_callback)(CURL *easy,      /* easy handle */
+typedef int (CURL_FUNCC *curl_socket_callback)(CURL *easy,      /* easy handle */
                                     curl_socket_t s, /* socket */
                                     int what,        /* see above */
                                     void *userp,     /* private callback
@@ -273,20 +273,20 @@ typedef int (*curl_socket_callback)(CURL *easy,      /* easy handle */
  *
  * Returns: The callback should return zero.
  */
-typedef int (*curl_multi_timer_callback)(CURLM *multi,    /* multi handle */
+typedef int (CURL_FUNCC *curl_multi_timer_callback)(CURLM *multi,    /* multi handle */
                                          long timeout_ms, /* see above */
                                          void *userp);    /* private callback
                                                              pointer */
 
-CURL_EXTERN CURLMcode curl_multi_socket(CURLM *multi_handle, curl_socket_t s,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_socket(CURLM *multi_handle, curl_socket_t s,
                                         int *running_handles);
 
-CURL_EXTERN CURLMcode curl_multi_socket_action(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_socket_action(CURLM *multi_handle,
                                                curl_socket_t s,
                                                int ev_bitmask,
                                                int *running_handles);
 
-CURL_EXTERN CURLMcode curl_multi_socket_all(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_socket_all(CURLM *multi_handle,
                                             int *running_handles);
 
 #ifndef CURL_ALLOW_OLD_MULTI_SOCKET
@@ -305,7 +305,7 @@ CURL_EXTERN CURLMcode curl_multi_socket_all(CURLM *multi_handle,
  *
  * Returns: CURLM error code.
  */
-CURL_EXTERN CURLMcode curl_multi_timeout(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_timeout(CURLM *multi_handle,
                                          long *milliseconds);
 
 #undef CINIT /* re-using the same name as in curl.h */
@@ -376,7 +376,7 @@ typedef enum {
  *
  * Returns: CURLM error code.
  */
-CURL_EXTERN CURLMcode curl_multi_setopt(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_setopt(CURLM *multi_handle,
                                         CURLMoption option, ...);
 
 
@@ -389,7 +389,7 @@ CURL_EXTERN CURLMcode curl_multi_setopt(CURLM *multi_handle,
  *
  * Returns: CURLM error code.
  */
-CURL_EXTERN CURLMcode curl_multi_assign(CURLM *multi_handle,
+CURL_EXTERN CURLMcode CURL_FUNCC curl_multi_assign(CURLM *multi_handle,
                                         curl_socket_t sockfd, void *sockp);
 
 #ifdef __cplusplus
-- 
2.8.2

