From aceda0d595920c861ab568c55c4f1c6be3fade08 Mon Sep 17 00:00:00 2001
From: Ioan-Adrian Ratiu <adrian.ratiu@ni.com>
Date: Wed, 3 Feb 2016 16:20:30 +0200
Subject: [PATCH] semodule: Stack size limit check for NILRT

Verify the stack size limit is sufficient to run semodule in order to
avoid unpleasant overflow errors. Immediately exit with error message
otherwise.

Upstream-Status: Inappropriate (NI-specific)

Signed-off-by: Haris Okanovic <haris.okanovic@ni.com>
Signed-off-by: Ioan-Adrian Ratiu <adrian.ratiu@ni.com>
---
 semodule/semodule.c | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/semodule/semodule.c b/semodule/semodule.c
index bcfaa2b..2e2540a 100644
--- a/semodule/semodule.c
+++ b/semodule/semodule.c
@@ -21,6 +21,7 @@
 #include <sys/types.h>
 #include <libgen.h>
 #include <limits.h>
+#include <sys/resource.h>
 
 #include <semanage/modules.h>
 
@@ -107,6 +108,21 @@ static void set_store_root(char *path)
 	exit(1);
 }
 
+/* Verify there's enough stack space to run this program */
+static void check_stack_size(void)
+{
+    struct rlimit rl;
+    if(getrlimit(RLIMIT_STACK, &rl) != 0) {
+        fprintf(stderr, "Failed to get stack size limit.\n");
+        exit(1);
+    }
+    if(rl.rlim_cur < 1024*1024) {
+        fprintf(stderr, "Stack is too small.\n"
+            "Run `ulimit -s 1024` to increase stack size limit to 1 MB before running this program.\n");
+        exit(1);
+    }
+}
+
 /* Establish signal handlers for the process. */
 static void create_signal_handlers(void)
 {
@@ -342,6 +358,7 @@ int main(int argc, char *argv[])
 	int result;
 	int status = EXIT_FAILURE;
	const char *genhomedirconargv[] = { "genhomedircon", "-B", "-n" };
+	check_stack_size();
 	create_signal_handlers();
 	if (strcmp(basename(argv[0]), "genhomedircon") == 0) {
 		argc = 3;
-- 
2.8.2

