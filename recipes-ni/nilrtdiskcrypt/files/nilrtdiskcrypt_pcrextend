#!/bin/bash
set -e
source "/usr/lib/nilrtdiskcrypt.common"

function print_usage_and_die () {
    local message="$1"
    cat >&2 <<ENDHELP
ERROR: $message

Usage: $0 [-D] [-P pcrRegister] [-s | -l listfile | -f fileOrDirPath]
 Extends one or more PCRs with contents of specified files or stdin.
 -D Print digest input data to stdout instead of extending PCR, for
    debug/diagnostic purposes. May print unescaped binary data.
    Always fails with non-zero exit code.
 -P PCR register to extent. Defaults to 12.
 -s Extends with contents of input strings.
 -f Extends with contents of specified file. Can be specified more
    than once.
 -l Extends with contents of files in specified list.
 NOTE: -s, -f, and -l are mutually exclusive.
ENDHELP
    exit 1
}

debugMode=false
pcrRegister=""
inputFormat=""
strings=""
filePaths=""
listPaths=""

while getopts "DP:s:f:l:" opt; do
    case "$opt" in
    D)  debugMode=true ;;
    P)  [ -z "$pcrRegister" ] && pcrRegister="$OPTARG" || print_usage_and_die "Cannot specify more than one PCR register" ;;
    s)  if [ -z "$inputFormat" -o "$inputFormat" == "s" ]; then
            inputFormat="s"
            strings="$strings""$OPTARG"
        else
            print_usage_and_die "Cannot specify more than one input format"
        fi ;;
    f)  if [ -z "$inputFormat" -o "$inputFormat" == "f" ]; then
            inputFormat="f"
            filePaths="$filePaths $OPTARG"
        else
            print_usage_and_die "Cannot specify more than one input format"
        fi ;;
    l)  if [ -z "$inputFormat" -o "$inputFormat" == "l" ]; then
            inputFormat="l"
            listPaths="$listPaths $OPTARG"
        else
            print_usage_and_die "Cannot specify more than one input format"
        fi ;;
    \?)  print_usage_and_die "Invalid arg" ;;
    esac
done
shift $(($OPTIND - 1))

[ -n "$pcrRegister" ] || pcrRegister="12"
[ -n "$inputFormat" ] || print_usage_and_die "Must specify at least one input format (-s, -f, or -l)"

orig_pwd="$PWD"

function fixup_path () {
    local path="$1"

    if [ "${path:0:1}" != "/" ]; then
        path="$orig_pwd/$path"
    fi

    echo "$path"
}

status "Init"
take_lock
cd_to_empty
init_work_dir

# for sanity check below
status "Get pcrRegister=$pcrRegister value before"
tpm2_pcrlist -L "$TPM_ALG_SHA256:$pcrRegister" >"$WORK_DIR/pcrlist.before"
status "pcrlist.before: `cat "$WORK_DIR/pcrlist.before" | grep "^PCR_$pcrRegister:"`"

echo -n >"$WORK_DIR/digest.stdout"
echo -n >"$WORK_DIR/digest.stderr"
echo -n >"$WORK_DIR/reader.stderr"

function print_stat () {
    local filepath="$1"
    echo -n "stat($filepath)="
    stat -c '%u:%g:0%a(%A)' "$filepath" || echo 1>&2 "Failed to read stats of filepath=$filepath"
}

function print_path_stats () {
    local filepath="$1"
    local old_filepath=""

    while true; do
        print_stat "$filepath"
        if [ -L "$filepath" ]; then
            print_path_stats "`readlink "$filepath"`"
        fi

        old_filepath="$filepath"
        filepath="`dirname "$filepath"`"
        if [ "$filepath" == "$old_filepath" ]; then
            break
        fi
    done
}

function print_file () {
    local filepath="$1"

    echo "filepath=$filepath"
    print_path_stats "$filepath"

    if [ -d "$filepath" ]; then
        while read sub_filepath; do
            print_file "$sub_filepath"
        done < <(find "$filepath/" '!' -path "$filepath/")
    else
        echo "-----BEGIN-----"
        cat "$filepath" || echo 1>&2 "Failed to read filepath=$filepath"
        echo "-----END-----"
    fi
}

function print_all () {
    if [ "$inputFormat" == "s" ]; then
        echo "$strings"
    elif [ "$inputFormat" == "f" ]; then
        for filepath in $filePaths; do
            filepath="`fixup_path "$filepath"`"
            print_file "$filepath"
        done
    elif [ "$inputFormat" == "l" ]; then
        # read file list from stdin
        for listfile in $listPaths; do
            listfile="`fixup_path "$listfile"`"
            print_file "$listfile"

            allow_missing=false

            while read line; do
                # skip empty lines and comments
                if [ -z "$line" -o "${line:0:1}" == "#" ]; then
                    continue
                fi

                # process config options
                if [ "$line" == "@allow-missing=1" ]; then
                    allow_missing=true
                    continue
                elif [ "$line" == "@allow-missing=0" ]; then
                    allow_missing=false
                    continue
                elif [ "${line:0:1}" == "@" ]; then
                    echo 1>&2 "Invalid config option: $line"
                fi

                filepath="`fixup_path "$line"`"

                # ignore missing top level file paths, if enabled
                if $allow_missing && [ ! -e "$filepath" ]; then
                    echo "Missing filepath=$filepath"
                    continue
                fi

                print_file "$filepath"
            done <"$listfile"
        done
    else
        echo 1>&2 "Invalid inputFormat"
    fi
}

status "Read and digest data"
if $debugMode; then
    (
        set +e
        print_all
        exit 0
    )

    status "Failing due to debug mode"
    exit 1
else
    (
        set +e
        print_all
        exit 0
    ) 2>"$WORK_DIR/reader.stderr" | sha256sum >"$WORK_DIR/digest.stdout" 2>"$WORK_DIR/digest.stderr"
fi

digest="`cat "$WORK_DIR/digest.stdout" | cut -d' ' -f1 || true`"
[ -n "$digest" ] || error "Digest failed"

status "Extend pcrRegister=$pcrRegister with digest=$digest"
tpm2_pcrextend "$pcrRegister:$TPM_ALG_SHA256=$digest" || error "PCR extend failed"

status "Get pcrRegister=$pcrRegister value after"
tpm2_pcrlist -L "$TPM_ALG_SHA256:$pcrRegister" >"$WORK_DIR/pcrlist.after"
status "pcrlist.after: `cat "$WORK_DIR/pcrlist.after" | grep "^PCR_$pcrRegister:"`"

status "sanity check: register should be different after extend"
if cmp -s "$WORK_DIR/pcrlist.before" "$WORK_DIR/pcrlist.after"; then
    error "Extend failed"
fi

status "Print reader errors, if any"
if [ -s "$WORK_DIR/reader.stderr" ]; then
    cat "$WORK_DIR/reader.stderr" 1>&2
fi

status "Print digest errors, if any"
if [ -s "$WORK_DIR/digest.stderr" ]; then
    cat "$WORK_DIR/digest.stderr" 1>&2
fi

[ ! -s "$WORK_DIR/reader.stderr" ] || error "File read failed with errors"
[ ! -s "$WORK_DIR/digest.stderr" ] || error "Digest failed with errors"

status "SUCCESS"
