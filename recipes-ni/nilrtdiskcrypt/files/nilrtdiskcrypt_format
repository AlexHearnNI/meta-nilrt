#!/bin/bash
set -e
source "/usr/lib/nilrtdiskcrypt.common"

function print_usage_and_die () {
    local message="$1"
    cat >&2 <<ENDHELP
ERROR: $message

Usage: $0 [ -u unsealedKeySlotNumber ...] [ -s sealedKeySlotNumber ...] [ -d devNode ... ] [ -B fslabel]
 Generates and seals a new key in speicfied TPM key slots, then formats
 and opens specified partitions as luks using new key. Prints paths to
 mapped device nodes.
 -B stores the unsealed key on the filesystem labeled fslabel
ENDHELP
    exit 1
}

# get args
unsealedKeySlotNumbers=""
sealedKeySlotNumbers=""
devNodes=""
backupKey=no

while getopts "u:s:d:B:" opt; do
    case "$opt" in
    u )  unsealedKeySlotNumbers="$unsealedKeySlotNumbers $OPTARG" ;;
    s )  sealedKeySlotNumbers="$sealedKeySlotNumbers $OPTARG" ;;
    d )  devNodes="$devNodes $OPTARG" ;;
    B )  backupKey=yes && backupLabel="$OPTARG" ;;
    \?)  print_usage_and_die "Invalid arg" ;;
    esac
done
shift $(($OPTIND - 1))

[ -n "$unsealedKeySlotNumbers""$sealedKeySlotNumbers" ] || print_usage_and_die "Must specify at least one TPM key slot number"
[ -n "$devNodes" ] || print_usage_and_die "Must specify at least one device to format"

if [ "$backupKey" = yes ]; then
    [ -z "$backupLabel" ] && print_usage_and_die "Must specify a filesystem label for the arg -B"

    status "Detecting backup device labeled $backupLabel"
    bkpDevice=$(lsblk -l -n -o LABEL,NAME | grep "^$backupLabel " | tr -s ' ' | cut -d' ' -f2 || true )
    if [ -z "$bkpDevice" ]; then
        print_usage_and_die "Could not detect block device containing filesystem label $backupLabel"
    fi
fi

status "Init"
take_lock
cd_to_empty
init_work_dir

status "Sanity check: Ensure specified devices are not mounted or open"
for devNode in $devNodes; do
    sanity_check_luks_volume_closed "$devNode"
done

status "Clear existing keys in TPM"
for ksNumb in $unsealedKeySlotNumbers $sealedKeySlotNumbers; do
    ksHandle="`get_key_slot_handle "$ksNumb"`"
    nvdestroy "$ksHandle"
done

create_sealed_disk_key

status "Format devices"
for devNode in $devNodes; do
    status "Destroy devNode=$devNode"
    do_silently dd if=/dev/zero of="$devNode" bs=1048576 count=1  # 1048576 bytes = 1 MB

    status "luksFormat devNode=$devNode"
    cryptsetup \
        -q \
        --key-file "$WORK_DIR/key" \
        --cipher aes-xts-plain64 \
        --key-size 512 \
        --hash sha256 \
        luksFormat "$devNode"
done

status "Open devices"
for devNode in $devNodes; do
    status "luksOpen devNode=$devNode"
    mapperPath="`get_mapper_path "$devNode"`"
    [ ! -e "$mapperPath" ] || error "devNode=$devNode already open at mapperPath=$mapperPath"
    cryptsetup \
        --key-file "$WORK_DIR/key" \
        luksOpen "$devNode" "`basename "$mapperPath"`"
    [ -e "$mapperPath" ] || error "luksOpen failed to create mapperPath=$mapperPath"

    # print mapped device path
    echo "$mapperPath"
done

status "Store unsealed keys"
for ksNumb in $unsealedKeySlotNumbers; do
    ksHandle="`get_key_slot_handle "$ksNumb"`"
    nvwrite_file "key.unsealed.gz" "$ksHandle"
done

status "Store sealed keys"
for ksNumb in $sealedKeySlotNumbers; do
    ksHandle="`get_key_slot_handle "$ksNumb"`"
    nvwrite_file "key.sealed.gz" "$ksHandle"
done

if [ "$backupKey" = yes ]; then
    status "Store unsealed keys to backup labeled \"$backupLabel\""
    devSerialNo=$(ar p "$WORK_DIR/key.unsealed" sn)
    # assume $backupLabel is mounted by the system
    mountPoint=$(lsblk -l -n -o LABEL,MOUNTPOINT | grep "^$backupLabel " | tr -s ' ' | cut -d' ' -f2)
    mkdir -p "$mountPoint/nilrtdiskcrypt.keystore/"
    cp "$WORK_DIR/key.unsealed" "$mountPoint/nilrtdiskcrypt.keystore/key-$devSerialNo.ar.gz"
    sync
fi

status "Remove key"
clear_work_dir

status "SUCCESS"
