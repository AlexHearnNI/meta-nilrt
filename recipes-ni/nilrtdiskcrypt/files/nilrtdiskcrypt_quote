#!/bin/bash
set -e
source "/usr/lib/nilrtdiskcrypt.common"

function print_usage_and_die () {
    local message="$1"
    cat >&2 <<ENDHELP
ERROR: $message

Usage: $0 [-s | -f filePath ] [ -a | -j | -h ] [-q hex_uint32] [-P PCRSet]
 Returns a signed quote from TPM as either an ar archive or JSON file.
 The quote may optionally be qualified (salted) via -q parameter,
 which is delivered to TPM during signing to guard again replay attacks.
 Options:
  -s: Print to stdout (default)
  -f filePath: Save quote to specified file (in specified format)
  -a: Format quote as ar archive (default)
  -j: Format quote as json (binary data hex encoded)
  -d: Returns only unqualified PCR digest (hex encoded)
  -q hex_uint32: A qualifier (E.g. nonce) to send to TPM
  -P quote specified PCR set instead of default ($DEFAULT_QUOTING_PCR_SET)
ENDHELP
    exit 1
}

# get args
outputLocation=""
outputFormat=""
qualifier_hex=""
pcrSet=""

while getopts "sf:ajdq:P:" opt; do
    case "$opt" in
    s)  [ -z "$outputLocation" ] && outputLocation="-"       || print_usage_and_die "Cannot specify more than one output location" ;;
    f)  [ -z "$outputLocation" ] && outputLocation="$OPTARG" || print_usage_and_die "Cannot specify more than one output location" ;;
    a)  [ -z "$outputFormat" ] && outputFormat="a" || print_usage_and_die "Cannot specify more than one output format" ;;
    j)  [ -z "$outputFormat" ] && outputFormat="j" || print_usage_and_die "Cannot specify more than one output format" ;;
    d)  [ -z "$outputFormat" ] && outputFormat="d" || print_usage_and_die "Cannot specify more than one output format" ;;
    q)  [ -z "$qualifier_hex" ] && qualifier_hex="$OPTARG" || print_usage_and_die "Cannot specify more than one qualifier" ;;
    P)  [ -z "$pcrSet" ] && pcrSet="$OPTARG" || print_usage_and_die "Cannot specify more than one PCR set" ;;
    \?)  print_usage_and_die "Invalid arg" ;;
    esac
done
shift $(($OPTIND - 1))

[ -n "$outputLocation" ] || outputLocation="-"
[ -n "$outputFormat" ] || outputFormat="a"
[ -n "$pcrSet" ] || pcrSet="$DEFAULT_QUOTING_PCR_SET"
[ "$outputFormat" == "d" -a -n "$qualifier_hex" ] && print_usage_and_die "Cannot qualify digest-only output format"

if ! echo "$pcrSet" | egrep -q '^[0-9]+(,[0-9]+)*$'; then
    print_usage_and_die "PCR set must be a comma separated list of integers"
fi

# make abs path
if [ "$outputLocation" != "-" ]; then
    touch "$outputLocation"
    outputLocation="`realpath "$outputLocation"`"
fi

status "Init"
take_lock
cd_to_empty
init_work_dir

create_meta_data
read_attestation_public_key
quote_pcr "$pcrSet" "$qualifier_hex"
verify_signature "quote" "quote.sig" "attestation.pub"

# archive the quote
ar rc "$WORK_DIR/pcrquote" \
    "$WORK_DIR/magic" \
    "$WORK_DIR/model" \
    "$WORK_DIR/sn" \
    "$WORK_DIR/quote" \
    "$WORK_DIR/quote.pcrdigest" \
    "$WORK_DIR/quote.extradata" \
    "$WORK_DIR/quote.sig" \
    "$WORK_DIR/quote.format" \
    "$WORK_DIR/quote.sighash" \
    "$WORK_DIR/quote.sigscheme" \
    "$WORK_DIR/attestation.pub" \
    "$WORK_DIR/attestation.crt"
cat "$WORK_DIR/pcrquote" | gzip -c >"$WORK_DIR/pcrquote.gz"

function filter_json () {
    tr -C 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \-\n' '_'
}

cat >"$WORK_DIR/pcrquote.json" <<ENDJSON
{
    "magic": "`ar p "$WORK_DIR/pcrquote" magic | filter_json`",
    "model": "`ar p "$WORK_DIR/pcrquote" model | filter_json`",
    "sn": "`ar p "$WORK_DIR/pcrquote" sn | filter_json`",
    "quote": "`ar p "$WORK_DIR/pcrquote" quote | stdin_to_hex | filter_json`",
    "quote.pcrdigest": "`ar p "$WORK_DIR/pcrquote" quote.pcrdigest | filter_json`",
    "quote.extradata": "`ar p "$WORK_DIR/pcrquote" quote.extradata | filter_json`",
    "quote.sig": "`ar p "$WORK_DIR/pcrquote" quote.sig | stdin_to_hex | filter_json`",
    "quote.format": "`ar p "$WORK_DIR/pcrquote" quote.format | filter_json`",
    "quote.sighash": "`ar p "$WORK_DIR/pcrquote" quote.sighash | filter_json`",
    "quote.sigscheme": "`ar p "$WORK_DIR/pcrquote" quote.sigscheme | filter_json`",
    "attestation.pub": "`ar p "$WORK_DIR/pcrquote" attestation.pub | stdin_to_hex | filter_json`",
    "attestation.crt": "`ar p "$WORK_DIR/pcrquote" attestation.crt | stdin_to_hex | filter_json`"
}
ENDJSON

if [ "$outputFormat" == "j" ]; then
    if [ "$outputLocation" == "-" ]; then
        cat "$WORK_DIR/pcrquote.json"
    else
        cp  "$WORK_DIR/pcrquote.json" "$outputLocation"
    fi
elif [ "$outputFormat" == "d" ]; then
    if [ "$outputLocation" == "-" ]; then
        cat "$WORK_DIR/quote.pcrdigest"
    else
        cp "$WORK_DIR/quote.pcrdigest" "$outputLocation"
    fi
else
    if [ "$outputLocation" == "-" ]; then
        hexdump "$WORK_DIR/pcrquote.gz"
    else
        cat     "$WORK_DIR/pcrquote.gz" >"$outputLocation"
    fi
fi
