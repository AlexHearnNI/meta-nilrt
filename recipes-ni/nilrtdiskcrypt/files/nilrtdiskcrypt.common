#!/bin/bash
set -e
set -u
set -o pipefail

# add common search PATH for scripting tools
export PATH="/sbin:/bin:/usr/sbin:/usr/bin:$PATH"

function error () {
    echo >&2 "ERROR: $*"
    exit 1
}

function warn () {
    echo >&2 "WARNING: $*"
}

# Setup VERBOSE, useful for test and debug
if [ -z "${VERBOSE+x}" ]; then
    export VERBOSE=0
elif [ "$VERBOSE" == "yes" ]; then
    # in init scripts
    export VERBOSE=1
elif [ "$VERBOSE" != "0" ] && [ "$VERBOSE" != "1" ] && [ "$VERBOSE" != "2" ]; then
    export VERBOSE=0
else
    export VERBOSE
fi

function status () {
    if [ "$VERBOSE" -ge 1 ]; then
        echo >&2 "DEBUG: $*"
    fi
}

# Most tpm2-tools bins are overly verbose and don't provide a --quiet
# flag (or something similar). This is a small hack to squench verbose
# messages when we the user doesn't care to see them (when VERBOSE < 2).
function do_silently () {
    if [ "$VERBOSE" -ge 2 ]; then
        $* 1>&2
    else
        $* 2>&1 | (egrep -i "(error|fail|bug)" 1>&2 || true)
    fi
}

# constants
VOLATILE_DIR="/var/volatile/nilrtdiskcrypt"
LOCK_FILE="$VOLATILE_DIR/lock"
EMPTY_DIR="$VOLATILE_DIR/emptydir"
WORK_DIR="$VOLATILE_DIR/workdir"
LOCK_TIMEOUT="300"  # 300 seconds = 5 minutes

TPM_ALG_SHA256="0x000B"
TPM_ALG_KEYEDHASH="0x0008"
TPM_KEY_ALG_RSA="0x0001"
TPM_RH_OWNER="0x40000001"

#TPM_PLATFORM_STORAGE_KEY_HANDLE="0x81800000"
TPM_USER_STORAGE_KEY_HANDLE="0x81000001"

#TPM_IDEVID_KEY_HANDLE="0x81810000"
TPM_ATTESTATION_KEY_HANDLE="0x81810001"

DEFAULT_KEY_SEALING_PCR_SET="0,2,4,9,10,11"
DEFAULT_QUOTING_PCR_SET="$DEFAULT_KEY_SEALING_PCR_SET,12"

KEY_MAGIC="ndc01"
KEY_SIZE="128" # 128 bytes = 1024 bits
KEY_SLOT_ATTRIBUTES="authwrite|authread|writeall"

#IDEVID_CERT_NVRAMHANDLE="0x01C90000"
ATTESTATION_CERT_NVRAMHANDLE="0x01410000"
KEYSLOT00_NVRAMHANDLE="0x01400000"
KEYSLOT01_NVRAMHANDLE="0x01400001"

# configure tpm2-tools to use default TPM device
export TPM2TOOLS_TCTI_NAME="device"

# user-only permissions
umask 0077

# disable core dumps
ulimit -c 0

# Most functionality requires root
function root_check () {
    status "Root check"
    [ "$UID" == "0" ] || warn "Most functinality in this tool is root-only (UID 0); current UID=$UID"
}

function init_volatile_dir () {
    status "Touch VOLATILE_DIR=$VOLATILE_DIR and LOCK_FILE=$LOCK_FILE"
    mkdir -p "$VOLATILE_DIR"
    touch "$LOCK_FILE"
    [ "`df -P -T "$VOLATILE_DIR" | tail -n +2 | tr -s " " | cut -d" " -f2`" == "tmpfs" ] || error "VOLATILE_DIR=$VOLATILE_DIR not on tmpfs"
    [ -z "`cat /proc/swaps | tail -n +2`" ] || warn "Running with swap is not supported"
}

# TPM may not be used in paralel, so we need an interprocess lock
#  while this script runs
function take_lock () {
    status "Take LOCK_FILE=$LOCK_FILE as fd=3"
    exec 3<> "$LOCK_FILE"
    timeout "$LOCK_TIMEOUT"s flock 3 || error "Failed to acquire LOCK_FILE=$LOCK_FILE in LOCK_TIMEOUT=$LOCK_TIMEOUT"
}

function clear_work_dir () {
    status "Clear WORK_DIR=$WORK_DIR"
    if [ -e  "$WORK_DIR" ]; then
        local verboseFlag=""
        [ "$VERBOSE" -ge 2 ] && verboseFlag="--verbose"
        find "$WORK_DIR" -type f -exec shred $verboseFlag --iterations 1 --random-source /dev/urandom {} \;
    fi
    rm -Rf "$WORK_DIR"
    [ ! -d "$WORK_DIR" ] || error "Failed to delete WORK_DIR=$WORK_DIR"
    # also clear objects from TPM memory
    # TODO: Remove this once we're past kernel 4.12 (use the in-kernel resource manager logic)
    tpm2_flushallhandles
}

function init_work_dir () {
    clear_work_dir

    status "Create empty WORK_DIR=$WORK_DIR"
    mkdir "$WORK_DIR"
    chmod 0700 "$WORK_DIR"

    status "Set trap to clear WORK_DIR on EXIT"
    trap 'exitCode="$?"; set +e; status "Exit trap"; clear_work_dir; exit "$exitCode"' EXIT
}

function cd_to_empty () {
    status "Change PWD to EMPTY_DIR=$EMPTY_DIR"
    rm -Rf     "$EMPTY_DIR"
    mkdir      "$EMPTY_DIR"
    cd         "$EMPTY_DIR"
    chmod 0500 "$EMPTY_DIR"
}

function stdin_to_hex () {
    # sanity check via egrep
    hexdump -ve '1/1 "%.2x"' | egrep '^[0-9A-Fa-f]*$'
}

function create_meta_data () {
    status "Create new magic and sn files"

    # Magic number to identify key files
    echo "$KEY_MAGIC" >"$WORK_DIR/magic"

    # Try to get model and sn from fw_printenv. These are purely for
    # informational purposes, so we can default to dummy values (0)
    # when missing.
    fw_printenv -n 'DeviceDesc' | head -1 >"$WORK_DIR/model" || true
    if [ ! -s "$WORK_DIR/model" ]; then
        warn "DeviceDesc missing, defaulting to \"0\""
        echo "0" >"$WORK_DIR/model"
    fi

    fw_printenv -n 'serial#' | head -1 >"$WORK_DIR/sn" || true
    if [ ! -s "$WORK_DIR/sn" ]; then
        warn "serial# missing, defaulting to \"0\""
        echo "0" >"$WORK_DIR/sn"
    fi
}

function check_tpm_caps () {
    status "Verify TPM supports all desired functionality"
    tpm2_dump_capability --capability algorithms >"$WORK_DIR/algorithms.tpmcaps"
    tpm2_dump_capability --capability commands >"$WORK_DIR/commands.tpmcaps"
    for algorithm in RSASSA AES CFB SHA256; do
        if grep -q -i "$algorithm" "$WORK_DIR/algorithms.tpmcaps"; then
            status "TPM has algorithm=$algorithm"
        else
            error "TPM does NOT have algorithm=$algorithm"
        fi
    done
}

function check_user_storage_key () {
    status "Check TPM_USER_STORAGE_KEY_HANDLE=$TPM_USER_STORAGE_KEY_HANDLE with TPM_ALG_SHA256 and TPM_KEY_ALG_RSA exists"
    tpm2_listpersistent --halg "$TPM_ALG_SHA256" --kalg "$TPM_KEY_ALG_RSA" | grep -q ":$TPM_USER_STORAGE_KEY_HANDLE "
}

function create_user_storage_key_ifmissing () {
    if check_user_storage_key; then
        status "Already has TPM_USER_STORAGE_KEY_HANDLE=$TPM_USER_STORAGE_KEY_HANDLE"
    else
        status "Create new persistent key at user_storage_key.context"
        do_silently tpm2_createprimary \
            --auth "o" \
            --halg "$TPM_ALG_SHA256" \
            --kalg "$TPM_KEY_ALG_RSA" \
            --aes-key-size 256 \
            --context "$WORK_DIR/user_storage_key.context"

        status "Persist user_storage_key.context as TPM_USER_STORAGE_KEY_HANDLE=$TPM_USER_STORAGE_KEY_HANDLE"
        do_silently tpm2_evictcontrol \
            --auth "o" \
            --context "$WORK_DIR/user_storage_key.context" \
            --persistent "$TPM_USER_STORAGE_KEY_HANDLE"
    fi
}

function read_attestation_public_key () {
    status "Read public key of TPM_ATTESTATION_KEY_HANDLE=$TPM_ATTESTATION_KEY_HANDLE to attestation.pub"
    do_silently tpm2_readpublic \
        --object "$TPM_ATTESTATION_KEY_HANDLE" \
        --opu "$WORK_DIR/attestation.pub" \
        --format "pem"
    [ -f "$WORK_DIR/attestation.pub" ]

    status "Read attestation.crt from ATTESTATION_CERT_NVRAMHANDLE=$ATTESTATION_CERT_NVRAMHANDLE"
    tpm2_nvread \
        --index "$ATTESTATION_CERT_NVRAMHANDLE" \
        --authHandle "$ATTESTATION_CERT_NVRAMHANDLE" \
        --output "$WORK_DIR/attestation.crt.der" \
        >"$WORK_DIR/tool-output" 2>&1 || echo -n >"$WORK_DIR/attestation.crt.der"
    openssl x509 \
        -inform "der" -outform "pem" \
        -in "$WORK_DIR/attestation.crt.der" \
        -out "$WORK_DIR/attestation.crt" \
        >>"$WORK_DIR/tool-output" 2>&1 || echo -n >"$WORK_DIR/attestation.crt"
    if [ "$VERBOSE" -ge 2 -a -s "$WORK_DIR/tool-output" ]; then
        # XXX drop stdout/stderr redirection once we have tool to check
        #  if nvram slot is empty. For now reading a crt silently fails
        #  with empty attestation.crt file when VERBOSE < 2.
        cat "$WORK_DIR/tool-output" 1>&2
    fi
    [ -f "$WORK_DIR/attestation.crt" ]
}

function quote_pcr () {
    local pcrSet="$1"
    local qualifier_hex="$2"

    status "Quote pcrSet=$pcrSet to quote, quote.sig, and quote.pcrdigest (TPM_ATTESTATION_KEY_HANDLE=$TPM_ATTESTATION_KEY_HANDLE, qualifier_hex=$qualifier_hex)"

    local qualifier_hex_arg=""
    if [ -n "$qualifier_hex" ]; then
        # tpm2 only supports 32-bit qualifiers
        echo "$qualifier_hex" | egrep -q '^0x[0-9A-Fa-f]{8}$' || error "Malformed qualifier_hex=$qualifier_hex, must be 8-digit hex string beginning with 0x"
        qualifier_hex_arg="--qualifyData ${qualifier_hex:2}"
    fi

    do_silently tpm2_quote \
        --akHandle "$TPM_ATTESTATION_KEY_HANDLE" \
        --selList "$TPM_ALG_SHA256:$pcrSet" \
        --sig-hash-algorithm "$TPM_ALG_SHA256" \
        $qualifier_hex_arg \
        --outFile "/dev/null" \
        --message "$WORK_DIR/quote" \
        --signature "$WORK_DIR/quote.sig" \
        --format "plain"

    [ -f "$WORK_DIR/quote" ]
    [ -f "$WORK_DIR/quote.sig" ]

    status "Extract quote.pcrdigest from quote"
    tpm2_print_quote "$WORK_DIR/quote" | grep "^attested.quote.pcrDigest=" | cut -d"=" -f2 >"$WORK_DIR/quote.pcrdigest"
    tpm2_print_quote "$WORK_DIR/quote" | grep "^extraData=" | cut -d"=" -f2 >"$WORK_DIR/quote.extradata"

    status "Write quote metadata: quote.format, quote.sighash, and quote.sigscheme"
    echo "tpm2" >"$WORK_DIR/quote.format"
    echo "sha-256" >"$WORK_DIR/quote.sighash"
    echo "rsassa-pkcs1-v1_5" >"$WORK_DIR/quote.sigscheme"
}

function verify_signature () {
    local subjectfile="$1"
    local sigfile="$2"
    local pubkeyfile="$3"

    status "Verify subjectfile=$subjectfile signature (raw sha256 sigfile=$sigfile) against pubkeyfile=$pubkeyfile (PEM)"

    do_silently openssl dgst -verify "$WORK_DIR/$pubkeyfile" -keyform "PEM" -sha256 -signature "$WORK_DIR/$sigfile" "$WORK_DIR/$subjectfile"
}

function create_seeds () {
    status "Generate seed files rngseed.tpm and rngseed.urandom"
    do_silently tpm2_getrandom -o "$WORK_DIR/rngseed.tpm" 32
    do_silently dd if="/dev/urandom" of="$WORK_DIR/rngseed.urandom" bs="$KEY_SIZE" count="$KEY_SIZE"
}

function create_sealing_policy () {
    local sealingPCRSet="$1"

    status "Create new pcrlist file for sealingPCRSet=$sealingPCRSet"
    do_silently tpm2_pcrlist \
        --selList "$TPM_ALG_SHA256:$sealingPCRSet" \
        --output "$WORK_DIR/pcrlist"

    status "Create new sealingpol file for sealingPCRSet=$sealingPCRSet and pcrlist"
    do_silently tpm2_createpolicy \
        -P \
        --set-list "$TPM_ALG_SHA256:$sealingPCRSet" \
        --pcr-input-file "$WORK_DIR/pcrlist" \
        --policy-file "$WORK_DIR/sealingpol"
}

function write_sealing_pcr_set () {
    local sealingPCRSet="$1"

    status "Create new pcrselect file with sealingPCRSet=$sealingPCRSet"
    echo "$sealingPCRSet" >"$WORK_DIR/pcrselect"
}

function read_sealing_pcr_set () {
    local sealingPCRSet=""

    status "Reading sealingPCRSet from pcrselect file"
    [ -f "$WORK_DIR/pcrselect" ] || error "Missing pcrselect file"
    egrep -q '^[0-9]+(,[0-9]+)*$' "$WORK_DIR/pcrselect" || error "Malformed pcrselect file"
    sealingPCRSet="$(<"$WORK_DIR/pcrselect")"
    status "Got sealingPCRSet=$sealingPCRSet"

    echo "$sealingPCRSet"
}

function create_disk_key () {
    status "Create new key file ($KEY_SIZE bytes)"
    do_silently openssl rand \
        -rand "$WORK_DIR/rngseed.tpm:$WORK_DIR/rngseed.urandom" \
        -out "$WORK_DIR/key" \
        "$KEY_SIZE"
}

function seal_key () {
    check_user_storage_key || error "Invalid user storage key"

    status "Create key.pub and key.priv (sealed TPM2 objects) from key"
    do_silently tpm2_create \
        --parent "$TPM_USER_STORAGE_KEY_HANDLE" \
        --inFile "$WORK_DIR/key" \
        --policy-file "$WORK_DIR/sealingpol" \
        --kalg "$TPM_ALG_KEYEDHASH" \
        --halg "$TPM_ALG_SHA256" \
        --pubfile "$WORK_DIR/key.pub" \
        --privfile "$WORK_DIR/key.priv" \
        --enforce-policy 1
}

function unseal_key () {
    local sealingPCRSet="$1"

    check_user_storage_key || error "Invalid user storage key"

    status "Load key.pub and key.priv to loaded-key.handle"
    do_silently tpm2_load \
        --parent "$TPM_USER_STORAGE_KEY_HANDLE" \
        --pubfile "$WORK_DIR/key.pub" \
        --privfile "$WORK_DIR/key.priv" \
        --context "loaded-key.handle"

    status "Unseal key at loaded-key.handle with sealingPCRSet=$sealingPCRSet and pcrlist"
    do_silently tpm2_unseal \
        --itemContext "loaded-key.handle" \
        --set-list "$TPM_ALG_SHA256:$sealingPCRSet" \
        --pcr-input-file "$WORK_DIR/pcrlist" \
        --outfile "$WORK_DIR/key"

    [ -f "$WORK_DIR/key" ] || error "Failed to unseal key"
}

function pack_unsealed_key () {
    status "Create key.unsealed.gz containing magic, sn, key, and pcrselect"
    ar rc "$WORK_DIR/key.unsealed" "$WORK_DIR/magic" "$WORK_DIR/sn" "$WORK_DIR/key" "$WORK_DIR/pcrselect"
    cat "$WORK_DIR/key.unsealed" | gzip -c >"$WORK_DIR/key.unsealed.gz"
}

function pack_sealed_key () {
    status "Create key.sealed.gz containing magic, sn, key.priv, key.pub, and pcrselect"
    ar rc "$WORK_DIR/key.sealed" "$WORK_DIR/magic" "$WORK_DIR/sn" "$WORK_DIR/key.priv" "$WORK_DIR/key.pub" "$WORK_DIR/pcrselect"
    cat "$WORK_DIR/key.sealed" | gzip -c >"$WORK_DIR/key.sealed.gz"
}

function unpack_key () {
    local filename="$1"
    local gunzip_filename="$2"

    status "Unpack $filename as $gunzip_filename"
    rm -f "$WORK_DIR/$gunzip_filename"
    cat "$WORK_DIR/$filename" | gunzip -c >"$WORK_DIR/$gunzip_filename" 2>"$WORK_DIR/tool-output"
    if [ "$VERBOSE" -ge 2 -a -s "$WORK_DIR/tool-output" ]; then
        # XXX tpm2_nvread zero pads output resulting in "trailing junk"
        #  warning from gunzip. Suppress warning when VERBOSE < 2.
        #  Remove this when tpm2_nvread correctly truncates output.
        cat "$WORK_DIR/tool-output" 1>&2
    fi

    status "Extract magic, sn, key, key.priv, key.pub, and pcrselect from $gunzip_filename"
    (cd "$WORK_DIR" && ar x "$WORK_DIR/$gunzip_filename")
    [ -f "$WORK_DIR/magic" ] || error "Malformed data in TPM: Missing magic"
    [ "`cat "$WORK_DIR/magic"`" == "$KEY_MAGIC" ] || error "Malformed data in TPM: Bad magic"
    [ -f "$WORK_DIR/sn" ] || error "Malformed data in TPM: Missing sn"
    [ -f "$WORK_DIR/key" ] || [ -f "$WORK_DIR/key.priv" -a -f "$WORK_DIR/key.pub" ] || error "Malformed data in TPM: Missing both sealed and unsealed key"
    [ -f "$WORK_DIR/pcrselect" ] || error "Malformed data in TPM: Missing pcrselect"
}

function has_unsealed_key () {
    status "Check if WORK_DIR contians unsealed key"
    [ -f "$WORK_DIR/key" ]
}

function has_sealed_key () {
    status "Check if WORK_DIR contians sealed key"
    [ -f "$WORK_DIR/key.priv" -a -f "$WORK_DIR/key.pub" ]
}

function get_key_slot_handle () {
    local keySlotNumber="$1"
    case "$keySlotNumber" in
    0 )  echo "$KEYSLOT00_NVRAMHANDLE" ;;
    1 )  echo "$KEYSLOT01_NVRAMHANDLE" ;;
    \?)  error "Invalid keySlotNumber=$keySlotNumber" ;;
    esac
}

# Releases nvram_handle if defined; noop otherwise.
# XXX We should rewrite this in the future, once tpm2-tools has a good
# way to check existence of nvram_handle. E.g.
#   if is_nv_defined "$nvram_handle"; then
#     tpm2_nvrelease ... "$nvram_handle" ...
#   fi
function nvrelease_ifdefined () {
    local nvram_handle="$1"

    status "Release nvram_handle=$nvram_handle (if defined)"
    tpm2_nvrelease \
        --authHandle "$TPM_RH_OWNER" \
        --index "$nvram_handle" \
        >"$WORK_DIR/tpm2_nvrelease.stdout" 2>&1 || true

    if [ "$VERBOSE" -ge 2 ]; then
        echo "tpm2_nvrelease.stdout:" 1>&2
        cat "$WORK_DIR/tpm2_nvrelease.stdout" 1>&2
    fi
}

function nvdefine () {
    local nvram_handle="$1"
    local nvram_size="$2"
    local nvram_attributes="$3"

    status "Define nvram_handle=$nvram_handle, nvram_size=$nvram_size, nvram_attributes=$nvram_attributes"
    tpm2_nvdefine \
        --authHandle "$TPM_RH_OWNER" \
        --index "$nvram_handle" \
        --size "$nvram_size" \
        --attribute "$nvram_attributes"
}

function nvwrite_file () {
    local filename="$1"
    local nvram_handle="$2"

    status "Write $filename to nvram_handle=$nvram_handle"
    [ -f "$WORK_DIR/$filename" ] || error "filename=$filename not in WORK_DIR"
    do_silently tpm2_nvwrite \
        --index "$nvram_handle" \
        --authHandle "$nvram_handle" \
        --file "$WORK_DIR/$filename"
}

function nvread_file () {
    local filename="$1"
    local nvram_handle="$2"

    status "Read $filename from nvram_handle=$nvram_handle"
    do_silently tpm2_nvread \
        --index "$nvram_handle" \
        --authHandle "$nvram_handle" \
        --output "$WORK_DIR/$filename"

    [ -f "$WORK_DIR/$filename" ] || error "filename=$filename not in WORK_DIR after read"
}

# Reads nvram_handle to file; writes empty file otherwise.
# XXX We should rewrite this in the future, once tpm2-tools has a good
# way to check existence of nvram_handle. E.g.
#   if is_nv_defined "$nvram_handle"; then
#     nvread_file "$filename" "$nvram_handle"
#   fi
function nvread_file_ifdefined () {
    local filename="$1"
    local nvram_handle="$2"

    status "Read $filename from nvram_handle=$nvram_handle (if defined)"
    echo -n >"$WORK_DIR/$filename"
    tpm2_nvread \
        --index "$nvram_handle" \
        --authHandle "$nvram_handle" \
        --output "$WORK_DIR/$filename" \
        >"$WORK_DIR/tpm2_nvread.stdout" 2>&1 || true

    if [ "$VERBOSE" -ge 2 ]; then
        echo "tpm2_nvread.stdout:" 1>&2
        cat "$WORK_DIR/tpm2_nvread.stdout" 1>&2
    fi
}

# generate new key starting with empty WORK_DIR
function create_sealed_disk_key () {
    local sealingPCRSet="$1"

    status "Create sealed disk key with sealingPCRSet=$sealingPCRSet"
    create_meta_data
    create_sealing_policy "$sealingPCRSet"
    write_sealing_pcr_set "$sealingPCRSet"
    create_seeds
    create_disk_key
    seal_key
    pack_unsealed_key
    pack_sealed_key
}

# verify disk key is sealed (read and re-seal if open)
function reseal_disk_key () {
    local nvram_handle="$1"
    nvread_file "key.out.gz" "$nvram_handle"
    unpack_key "key.out.gz" "key.out"
    if ! has_sealed_key; then
        status "Reseal key"
        has_unsealed_key || error "Missing unsealed key, malformed archive"
        local sealingPCRSet="`read_sealing_pcr_set`"
        create_sealing_policy "$sealingPCRSet"
        seal_key
        pack_sealed_key
        nvrelease_ifdefined "$nvram_handle"
        nvdefine "$nvram_handle" "`stat -c %s "$WORK_DIR/key.sealed.gz"`" "$KEY_SLOT_ATTRIBUTES"
        nvwrite_file "key.sealed.gz" "$nvram_handle"
    else
        status "Key already sealed"
    fi
}

# unseal a key and store it in workdir for later use
function download_disk_key () {
    local nvram_handle="$1"
    nvread_file "key.out.gz" "$nvram_handle"
    unpack_key "key.out.gz" "key.out"
    has_unsealed_key && error "Key must be sealed"
    has_sealed_key   || error "No sealed key found"
    local sealingPCRSet="`read_sealing_pcr_set`"
    create_sealing_policy "$sealingPCRSet"
    unseal_key "$sealingPCRSet"
    has_unsealed_key || error "No unsealed key after unseal operation"
}

function get_mapper_path () {
    echo /dev/mapper/"nilrtdiskcrypt_""`basename "$1"`"
}

function sanity_check_luks_volume_closed () {
    local devNode="$1"
    local mapperPath="`get_mapper_path "$devNode"`"
    status "Sanity check: verify devNode=$devNode (mapperPath=$mapperPath) is unmounted and closed"
    if mount | grep -q "^$mapperPath "; then
        error "mapperPath=$mapperPath still mounted, umount failed"
    fi
    if [ -e "$mapperPath" ]; then
        error "$mapperPath still exists, luksClose failed"
    fi
}

status "Common init"
root_check
init_volatile_dir
