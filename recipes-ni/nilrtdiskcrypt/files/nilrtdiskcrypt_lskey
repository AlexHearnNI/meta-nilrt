#!/bin/bash
set -e
source "/usr/lib/nilrtdiskcrypt.common"

function print_usage_and_die () {
    local message="$1"
    cat >&2 <<ENDHELP
ERROR: $message

Usage: $0 [ -k keySlotNumber ...]
 Prints information about specified keys
ENDHELP
    exit 1
}

# get args
keySlotNumbers=""

while getopts "k:" opt; do
    case "$opt" in
    k )  keySlotNumbers="$keySlotNumbers $OPTARG" ;;
    \?)  print_usage_and_die "Invalid arg" ;;
    esac
done
shift $(($OPTIND - 1))

[ -n "$keySlotNumbers" ] || print_usage_and_die "Must specify at least one key slot"

status "Init"
take_lock
cd_to_empty
init_work_dir

exitCode=0

for ksNumb in $keySlotNumbers; do
    status "Reading key in slot $ksNumb"
    ksHandle="`get_key_slot_handle "$ksNumb"`"

    if ! (
        nvread_file_ifdefined "key.out.gz" "$ksHandle"
        keySize="`stat -c %s "$WORK_DIR/key.out.gz"`"
        keyDigest="`sha256sum "$WORK_DIR/key.out.gz" | cut -d' ' -f1`"
        status "Got key.out.gz from nvram (keySize=$keySize, keyDigest=$keyDigest)"

        if [ "$keySize" -lt 1 ]; then
            echo "Key slot $ksNumb: empty"
        else
            unpack_key "key.out.gz" "key.out"
            sealingPCRSet="`read_sealing_pcr_set`"

            if has_unsealed_key; then
                echo "Key slot $ksNumb: unsealed (keySize=$keySize, keyDigest=$keyDigest, sealingPCRSet=$sealingPCRSet)"
            elif has_sealed_key; then
                echo "Key slot $ksNumb: sealed (keySize=$keySize, keyDigest=$keyDigest, sealingPCRSet=$sealingPCRSet)"
            else
                error "Key corrupted"
            fi
        fi
    ); then
        # warn and continue to other keys
        warn "Failed to read or parse key in slot $ksNumb"
        exitCode=1
    fi

    init_work_dir
done

status "Remove key"
clear_work_dir

status "SUCCESS"

exit "$exitCode"
