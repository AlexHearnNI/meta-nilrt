From 312937eb03c2b48e92bffd8f6ab88108008c6b6f Mon Sep 17 00:00:00 2001
From: Bill Pittman <bill.pittman@ni.com>
Date: Mon, 29 Apr 2019 14:15:18 -0500
Subject: [PATCH] rauc: Add command line option to skip bundle verification

Conditionally remove bundle verification checks when operating
on bundles.

Upstream-Status: Pending

Signed-off-by: Bill Pittman <bill.pittman@ni.com>
---
 include/context.h |  2 ++
 src/bundle.c      |  3 +++
 src/install.c     |  2 +-
 src/main.c        | 27 ++++++++++++++++-----------
 4 files changed, 22 insertions(+), 12 deletions(-)

diff --git a/include/context.h b/include/context.h
index b0bcfba..ba54e81 100644
--- a/include/context.h
+++ b/include/context.h
@@ -43,6 +43,8 @@ typedef struct {
 	gchar *handlerextra;
 	/* ignore compatible check */
 	gboolean ignore_compatible;
+	/* skip bundle verification */
+	gboolean bundle_nosig;
 
 	/* for storing installation runtime informations */
 	RContextInstallationInfo *install_info;
diff --git a/src/bundle.c b/src/bundle.c
index 9ca512c..e0fb5a1 100644
--- a/src/bundle.c
+++ b/src/bundle.c
@@ -326,6 +326,9 @@ static gboolean sign_bundle(const gchar *bundlename, GError **error)
 	g_autoptr(GFileOutputStream) bundlestream = NULL;
 	guint64 offset;
 
+	if (r_context()->bundle_nosig) 
+		return TRUE;
+
 	g_assert_nonnull(r_context()->certpath);
 	g_assert_nonnull(r_context()->keypath);
 
diff --git a/src/install.c b/src/install.c
index 6f535f7..3665b49 100644
--- a/src/install.c
+++ b/src/install.c
@@ -1283,7 +1283,7 @@ gboolean do_install_bundle(RaucInstallArgs *args, GError **error)
 	// TODO: mount info in context ?
 	install_args_update(args, "Checking and mounting bundle...");
 
-	res = check_bundle(bundlefile, &bundle, TRUE, &ierror);
+	res = check_bundle(bundlefile, &bundle, !r_context()->bundle_nosig, &ierror);
 	if (!res) {
 		g_propagate_error(error, ierror);
 		goto out;
diff --git a/src/main.c b/src/main.c
index 5f0ce56..bc1c7fc 100644
--- a/src/main.c
+++ b/src/main.c
@@ -23,7 +23,8 @@ GMainLoop *r_loop = NULL;
 int r_exit_status = 0;
 
 gboolean install_ignore_compatible = FALSE;
-gboolean info_noverify, info_dumpcert = FALSE;
+gboolean bundle_nosig = FALSE;
+gboolean info_dumpcert = FALSE;
 gboolean status_detailed = FALSE;
 gchar *output_format = NULL;
 
@@ -176,6 +177,7 @@ static gboolean install_start(int argc, char **argv)
 	args->status_result = 2;
 
 	r_context_conf()->ignore_compatible = install_ignore_compatible;
+	r_context_conf()->bundle_nosig = bundle_nosig;
 
 	r_loop = g_main_loop_new(NULL, FALSE);
 	if (ENABLE_SERVICE) {
@@ -261,11 +263,13 @@ static gboolean bundle_start(int argc, char **argv)
 		goto out;
 	}
 
-	if (r_context()->certpath == NULL ||
-	    r_context()->keypath == NULL) {
-		g_printerr("Cert and key files must be provided\n");
-		r_exit_status = 1;
-		goto out;
+	if (!r_context()->bundle_nosig) {
+		if (r_context()->certpath == NULL ||
+		    r_context()->keypath == NULL) {
+			g_printerr("Cert and key files must be provided\n");
+			r_exit_status = 1;
+			goto out;
+		}
 	}
 
 	g_debug("input directory: %s", argv[2]);
@@ -409,7 +413,7 @@ static gboolean resign_start(int argc, char **argv)
 		goto out;
 	}
 
-	if (!check_bundle(argv[2], &bundle, TRUE, &ierror)) {
+	if (!check_bundle(argv[2], &bundle, !bundle_nosig, &ierror)) {
 		g_printerr("%s\n", ierror->message);
 		g_clear_error(&ierror);
 		r_exit_status = 1;
@@ -454,7 +458,7 @@ static gboolean extract_start(int argc, char **argv)
 	g_debug("input bundle: %s", argv[2]);
 	g_debug("output dir: %s", argv[3]);
 
-	if (!check_bundle(argv[2], &bundle, TRUE, &ierror)) {
+	if (!check_bundle(argv[2], &bundle, !bundle_nosig, &ierror)) {
 		g_printerr("%s\n", ierror->message);
 		g_clear_error(&ierror);
 		r_exit_status = 1;
@@ -506,7 +510,7 @@ static gboolean convert_start(int argc, char **argv)
 	g_debug("input bundle: %s", argv[2]);
 	g_debug("output bundle: %s", argv[3]);
 
-	if (!check_bundle(argv[2], &bundle, TRUE, &ierror)) {
+	if (!check_bundle(argv[2], &bundle, !bundle_nosig, &ierror)) {
 		g_printerr("%s\n", ierror->message);
 		g_clear_error(&ierror);
 		r_exit_status = 1;
@@ -865,7 +869,7 @@ static gboolean info_start(int argc, char **argv)
 		goto out;
 	g_debug("input bundle: %s", bundlelocation);
 
-	res = check_bundle(bundlelocation, &bundle, !info_noverify, &error);
+	res = check_bundle(bundlelocation, &bundle, !bundle_nosig, &error);
 	if (!res) {
 		g_printerr("%s\n", error->message);
 		g_clear_error(&error);
@@ -1611,7 +1615,6 @@ GOptionEntry entries_install[] = {
 };
 
 GOptionEntry entries_info[] = {
-	{"no-verify", '\0', 0, G_OPTION_ARG_NONE, &info_noverify, "disable bundle verification", NULL},
 	{"output-format", '\0', 0, G_OPTION_ARG_STRING, &output_format, "output format", "FORMAT"},
 	{"dump-cert", '\0', 0, G_OPTION_ARG_NONE, &info_dumpcert, "dump certificate", NULL},
 	{0}
@@ -1639,6 +1642,7 @@ static void cmdline_handler(int argc, char **argv)
 		{"mount", '\0', 0, G_OPTION_ARG_FILENAME, &mount, "mount prefix", "PATH"},
 		{"override-boot-slot", '\0', 0, G_OPTION_ARG_STRING, &bootslot, "override auto-detection of booted slot", "BOOTNAME"},
 		{"handler-args", '\0', 0, G_OPTION_ARG_STRING, &handlerextra, "extra handler arguments", "ARGS"},
+	        {"no-signatures", '\0', 0, G_OPTION_ARG_NONE, &bundle_nosig, "disable bundle verification", NULL},
 		{"debug", 'd', 0, G_OPTION_ARG_NONE, &debug, "enable debug output", NULL},
 		{"version", '\0', 0, G_OPTION_ARG_NONE, &version, "display version", NULL},
 		{"help", 'h', 0, G_OPTION_ARG_NONE, &help, NULL, NULL},
@@ -1796,6 +1800,7 @@ static void cmdline_handler(int argc, char **argv)
 			r_context_conf()->bootslot = bootslot;
 		if (handlerextra)
 			r_context_conf()->handlerextra = handlerextra;
+		r_context_conf()->bundle_nosig = bundle_nosig;
 	} else {
 		if (confpath != NULL ||
 		    certpath != NULL ||
