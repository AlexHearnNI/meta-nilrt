#!/bin/bash

INVALID_NILRT_ID_MSG="Invalid value for PROVISION_PART_NILRT_ID. Use UUID=<value> or PARTUUID=<value> or auto."

# verify required tools are installed
for toolName in poweroff reboot mount umount sync ls rm ln mkdir cp echo printf dirname basename find grep egrep tar bzip2 bunzip2 lsblk cut; do
    if ! type "$toolName" >/dev/null; then
        printf "\n***Error: Missing $toolName\n"
        printf "PROVISIONING FAILED!"
        exit 1
    fi
done

if [ -e /ni_provisioning.common ]; then
    source /ni_provisioning.common
else
    printf "\n***Error: File ni_provisioning.common not found!\n"
    printf "PROVISIONING FAILED!"
    exit 1
fi

early_setup

# Source default answer file to prompt user for all questions
source_default_answer_file

if [[ $restore == "provision" ]]; then
    echo
    echo "NI Linux Real-Time Recovery."
    echo

    # source user's answer file, if present
    source_answer_file
    echo

    if [ "$(dmidecode | grep -c "DMI type 160")" -eq 0 ]; then
        print_warning "This target is not supported!"
        echo

        prompt_user "Do you want to continue? y/N" "^(y|n)$" "n" PROVISION_UNSUPPORTED_TARGET
        if [[ $PROVISION_UNSUPPORTED_TARGET != "y" ]]; then
            cleanup_and_exit 0
        fi
    fi
    echo

    if [[ "$PROVISION_PART_NILRT_ID" = "auto" ]]; then
        echo "The boot style is $BOOT_STYLE"
        echo

        echo "Continuing will partition the disk, format, and install minimal image to the target."
        echo

        prompt_user "Do you want to continue? [y/N]" "^(y|n)$" "n" PROVISION_REPARTITION_TARGET
        if [[ $PROVISION_REPARTITION_TARGET == "y" ]]; then
            provision_target usb
        fi
    else
        case "$PROVISION_PART_NILRT_ID" in
            LABEL=*)
                ;;
            UUID=*)
                ;;
            PARTUUID=*)
                ;;
            *)
                die "$INVALID_NILRT_ID_MSG"
                ;;
        esac

        column=${PROVISION_PART_NILRT_ID%%=*}
        nilrt_id=${PROVISION_PART_NILRT_ID##*=}
        if [[ -z "$nilrt_id" ]]; then
            die "$INVALID_NILRT_ID_MSG"
        fi
        if [[ "$column" = "LABEL" ]]; then
            grep_options=""
        else
            grep_options="-i"
        fi
        nilrt_path=`lsblk -rnpo NAME,"$column" | grep $grep_options "$nilrt_id" | cut -d' ' -f1`
        if [[ -z "$nilrt_path" ]]; then
            die "Partition with "$PROVISION_PART_NILRT_ID" not found."
        fi

        echo "The boot style is $BOOT_STYLE"
        echo

        echo "Continuing will format the specified partition and install minimal image to the target."
        echo

        prompt_user "Do you want to continue? [y/N]" "^(y|n)$" "n" PROVISION_REPARTITION_TARGET
        if [[ $PROVISION_REPARTITION_TARGET == "y" ]]; then
            if [[ "$column" = "UUID" ]]; then
                uuid="$nilrt_id"
            else
                uuid=""
            fi
            restore_minimal_image "$nilrt_path" "$uuid" "$PROVISION_PART_NILRT_LABEL"
        fi
    fi

elif [[ $restore == "migrate" || $restore == "backward-migrate" ]]; then
    PROVISION_REBOOT_METHOD="reboot"
    provision_target onboard "$restore"
elif [[ $restore == "auto-restore" ]]; then
    PROVISION_REBOOT_METHOD="reboot"
    restore_minimal_image
else
    echo
    echo "NI Linux Real-Time Restore."
    echo
    echo "Continuing will format the nilrt partition and will install minimal image."
    echo

    prompt_user "Do you want to continue? [y/N]" "^(y|n)$" "n" PROVISION_RESTORE_MINIMAL_IMAGE
    if [[ $PROVISION_RESTORE_MINIMAL_IMAGE == "y" ]]; then
        restore_minimal_image
    fi
fi

if [[ "$REBOOT_REQUIRED" -ne 0 ]]; then
    prompt_user "Please eject the installation media and restart the system (Reboot, poweroff, shell)" "^(reboot|poweroff|shell)$" "reboot" PROVISION_REBOOT_METHOD
fi

cleanup_and_exit 0
