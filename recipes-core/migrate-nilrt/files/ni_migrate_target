#!/bin/bash

NILRT_ARM_MIGRATION_SUPPORTED_DEVICES=""

NEXT_FEED_URI=""

# gross hack: previous nilrt OS vesion on ARM was all soft-float but the
# ninextos.ipk + the newer OS itself is hard-float, therefore opkg on
# the targets won't install (arch cortexa9hf-vfpv3 vs. cortexa9-vfpv3).
# This hacks opkg.conf to allow installing ninextos.ipk
hack_arm_opkg_arch()
{
    echo "arch cortexa9hf-vfpv3 60" >> /etc/opkg/arch.conf
}

# provious nilrt OS's safemode installs the ninextos payload to userfs
# because of ramdisk space constraints, so add userfs as a destination.
add_opkg_userfs_dest()
{
    echo "dest userfs /mnt/userfs" >> /etc/opkg/opkg.conf
}

remove_opkg_config()
{
    opkg remove --force-depends distro-feed-configs >/dev/null
    rm -f /etc/opkg/base-feeds.conf

    # sanity check
    unexpectedFiles="`find /etc/opkg/ | egrep -v '(^/etc/opkg/$)|(^/etc/opkg/arch\.conf$)|(^/etc/opkg/opkg\.conf$)'`"
    if [ -n "$unexpectedFiles" ]; then
        echo "WARNING: Unexpected files in /etc/opkg/:"
        echo "$unexpectedFiles"
    fi
}

# the ninextos ipk is present only in the newer nilrt OS feeds so make
# opkg download from there before triggering a migration.
replace_x64_opkg_migration_feed()
{
    remove_opkg_config

    # the overwrite is intentional
    echo  >/etc/opkg/ni_migrate_target-feeds.conf "src/gz extra-core2-64 $NEXT_FEED_URI/images/core2-64"
    echo >>/etc/opkg/ni_migrate_target-feeds.conf "src/gz main-all $NEXT_FEED_URI/main/all"
}

replace_arm_opkg_migration_feed()
{
    remove_opkg_config

    # the overwrite is intentional
    echo  >/etc/opkg/ni_migrate_target-feeds.conf "src/gz images-cortexa9hf-vfpv3 $NEXT_FEED_URI/images/cortexa9hf-vfpv3"
    echo >>/etc/opkg/ni_migrate_target-feeds.conf "src/gz main-cortexa9hf-vfpv3 $NEXT_FEED_URI/main/cortexa9hf-vfpv3"
    echo >>/etc/opkg/ni_migrate_target-feeds.conf "src/gz main-all $NEXT_FEED_URI/main/all"
}

migrate_target()
{
    if [[ $target_flavor == "legacy" ]]; then
        if [[ $ARCH == "x86_64" ]]; then
	    replace_x64_opkg_migration_feed
            opkg update
            opkg install ninextos || (echo "ERROR: Could not install ninextos" && return 1)
            mv /boot/.safe/bootimage.cfg /boot/.safe/bootimage_old.cfg
            cp /boot/.newNILinuxRT/bootimage.cfg /boot/.safe/
            fw_setenv consoleoutenable True
            /etc/init.d/nisetbootmode force-safemode
            reboot
        elif [[ $ARCH =~ "arm" ]]; then
	    hack_arm_opkg_arch
	    replace_arm_opkg_migration_feed
	    opkg update
	    if [ -f "/etc/natinst/safemode" ]; then
		# safemode ramfs is too small so we install in the userfs
		cd /mnt/userfs
		opkg download ninextos
		add_opkg_userfs_dest
		opkg install ninextos* -d userfs || (echo "ERROR: Could not install ninextos" && return 1)
		cp .newNILinuxRT/linux_fw_migrate.itb /boot/linux_runmode.itb
	    else
		opkg install ninextos || (echo "ERROR: Could not install ninextos" && return 1)
		cp /.newNILinuxRT/linux_fw_migrate.itb /boot/linux_runmode.itb
	    fi
	    reboot
        fi
    elif [[ $target_flavor == "new" ]]; then
        if [[ $ARCH == "x86_64" ]]; then
            replace_x64_opkg_migration_feed
            opkg update
            opkg install nioldos || (echo "ERROR: Could not install nioldos" && return 1)
            mv /boot/grub.cfg /boot/grub_old.cfg
            cp /boot/.oldNILinuxRT/grub.cfg /boot/
            reboot
        elif [[ $ARCH =~ "arm" ]]; then
	    replace_arm_opkg_migration_feed
	    opkg update
	    opkg install nioldos || (echo "ERROR: Could not install nioldos" && return 1)

	    # validate this device code, otherwise we can download a bad safemode itb
	    if [[ ! -z $DEVICE_CODE && $NILRT_ARM_MIGRATION_SUPPORTED_DEVICES =~ $DEVICE_CODE ]]; then
		opkg install zynq-safemode-cfgs-$DEVICE_CODE || (echo "ERROR: Could not install zynq-safemode-cfg-$DEVICE_CODE" && return 1)
		cp /boot/.oldNILinuxRT/bw-migrate.scr /boot/default.scr
		reboot
	    else
		echo "ERROR: Backwards migration is not supported for device '$DEVICE_CODE', it is only available for $NILRT_ARM_MIGRATION_SUPPORTED_DEVICES"
		return 1
	    fi
        fi
    fi
}

# check target architecture
ARCH=$(uname -m)
# check NI software version
target_flavor="legacy"
command -v nisafemodeversion > /dev/null 2>&1 || target_flavor="new"

DEVICE_CODE=$(fw_printenv -n DeviceCode | awk '{print substr($0,3)}')

cleanup_on_error() {
    echo "ERROR: Migration failed. Cleaning up installed packages to free space... "
    opkg remove migrate-nilrt nioldos ninextos
    if [[ $ARCH =~ "arm" ]]; then
	opkg remove zynq-safemode-cfgs-$DEVICE_CODE
    fi
}

echo
if [[  $target_flavor == "legacy" ]]; then
    echo "Continuing will partition, format and install the newer NILRT OS to the target."
elif [[  $target_flavor == "new" ]]; then
    echo "Continuing will partition, format and install the previous NILRT OS to the target."
fi
echo "All user data will be lost and the target will no longer be discoverable from your current LV version"
echo
read -p "To continue type YES: " USER_AGREEMENT
if [[ $USER_AGREEMENT == "YES" ]]; then
    if ! migrate_target; then
	cleanup_on_error
    fi
else
    echo "Aborted by user. To retry run $0 again."
fi
