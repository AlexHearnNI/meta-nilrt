#!/bin/bash

NEXT_FEED_URI=""

# gross hack: previous nilrt OS vesion on ARM was all soft-float but the
# ninextos.ipk + the newer OS itself is hard-float, therefore opkg on
# the targets won't install (arch cortexa9hf-vfpv3 vs. cortexa9-vfpv3).
# This hacks opkg.conf to allow installing ninextos.ipk
hack_arm_opkg_arch()
{
    echo "arch cortexa9hf-vfpv3 60" >> /etc/opkg/arch.conf
}

# provious nilrt OS's safemode installs the ninextos payload to userfs
# because of ramdisk space constraints, so add userfs as a destination.
add_opkg_userfs_dest()
{
    echo "dest userfs /mnt/userfs" >> /etc/opkg/opkg.conf
}

# the ninextos ipk is present only in the newer nilrt OS feeds so make
# opkg download from there before triggering a migration.
replace_x64_opkg_ninextos_feed()
{
    # the overwrite is intentional
    echo "src/gz extra-core2-64 $NEXT_FEED_URI/images/core2-64" > /etc/opkg/base-feeds.conf
    echo "src/gz main-all $NEXT_FEED_URI/main/all" >> /etc/opkg/base-feeds.conf
}

migrate_target()
{
    if [[ $target_flavor == "legacy" ]]; then
        if [[ $ARCH == "x86_64" ]]; then
	    replace_x64_opkg_ninextos_feed
            opkg update
            opkg install ninextos
            mv /boot/.safe/bootimage.cfg /boot/.safe/bootimage_old.cfg
            cp /boot/.newNILinuxRT/bootimage.cfg /boot/.safe/
            fw_setenv consoleoutenable True
            /etc/init.d/nisetbootmode force-safemode
            reboot
        elif [[ $ARCH =~ "arm" ]]; then
	    hack_arm_opkg_arch
	    opkg update
	    if [ -f "/etc/natinst/safemode" ]; then
		# safemode ramfs is too small so we install in the userfs
		cd /mnt/userfs
		opkg download ninextos
		add_opkg_userfs_dest
		opkg install ninextos* -d userfs
		cp .newNILinuxRT/linux_fw_migrate.itb /boot/linux_runmode.itb
	    else
		opkg install ninextos
		cp /.newNILinuxRT/linux_fw_migrate.itb /boot/linux_runmode.itb
	    fi
	    reboot
        fi
    elif [[ $target_flavor == "new" ]]; then
        if [[ $ARCH == "x86_64" ]]; then
            opkg update
            opkg install nioldos
            mv /boot/grub.cfg /boot/grub_old.cfg
            cp /boot/.oldNILinuxRT/grub.cfg /boot/
            reboot
        elif [[ $ARCH == "arm" ]]; then
            # TODO add arm migration
            echo "Migrate ARM"
        fi
    fi
}

# check target architecture
ARCH=$(uname -m)
# check NI software version
target_flavor="legacy"
command -v nisafemodeversion > /dev/null 2>&1 || target_flavor="new"

echo
if [[  $target_flavor == "legacy" ]]; then
    echo "Continuing will partition, format and install the newer NILRT OS to the target."
elif [[  $target_flavor == "new" ]]; then
    echo "Continuing will partition, format and install the previous NILRT OS to the target."
fi
echo "All user data will be lost and the target will no longer be discoverable from your current LV version"
echo
read -p "Do you want to continue?[y/N]" USER_AGREMENT
if [[ ${USER_AGREMENT,,} == "y" ]]; then
    migrate_target
fi
